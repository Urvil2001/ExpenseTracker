//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Expense_Tracker_EF.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Expense_TrackerEntities : DbContext
    {
        public Expense_TrackerEntities()
            : base("name=Expense_TrackerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category_Exp> Category_Exp { get; set; }
        public virtual DbSet<expens> expenses { get; set; }
        public virtual DbSet<Total_Expense_Limit> Total_Expense_Limit { get; set; }
    
        public virtual int delCategory(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delCategory", idParameter);
        }
    
        public virtual int delExpense(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delExpense", idParameter);
        }
    
        public virtual int INS_exp(string title, string description, Nullable<int> amount, Nullable<int> cid)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INS_exp", titleParameter, descriptionParameter, amountParameter, cidParameter);
        }
    
        public virtual int INSCategory(Nullable<int> iD, string cname, Nullable<int> cat_exp_limit)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var cnameParameter = cname != null ?
                new ObjectParameter("Cname", cname) :
                new ObjectParameter("Cname", typeof(string));
    
            var cat_exp_limitParameter = cat_exp_limit.HasValue ?
                new ObjectParameter("Cat_exp_limit", cat_exp_limit) :
                new ObjectParameter("Cat_exp_limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSCategory", iDParameter, cnameParameter, cat_exp_limitParameter);
        }
    
        public virtual int INSCategory_new(string cname, Nullable<int> cat_exp_limit)
        {
            var cnameParameter = cname != null ?
                new ObjectParameter("Cname", cname) :
                new ObjectParameter("Cname", typeof(string));
    
            var cat_exp_limitParameter = cat_exp_limit.HasValue ?
                new ObjectParameter("Cat_exp_limit", cat_exp_limit) :
                new ObjectParameter("Cat_exp_limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSCategory_new", cnameParameter, cat_exp_limitParameter);
        }
    
        public virtual ObjectResult<SelectAllCategory_Result> SelectAllCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllCategory_Result>("SelectAllCategory");
        }
    
        public virtual int Update_Category(Nullable<int> id, string category_name, Nullable<int> expense_limit)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var category_nameParameter = category_name != null ?
                new ObjectParameter("category_name", category_name) :
                new ObjectParameter("category_name", typeof(string));
    
            var expense_limitParameter = expense_limit.HasValue ?
                new ObjectParameter("expense_limit", expense_limit) :
                new ObjectParameter("expense_limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Category", idParameter, category_nameParameter, expense_limitParameter);
        }
    
        public virtual int Update_Expenses(Nullable<int> id, string title, string description, Nullable<int> amount, Nullable<int> catid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var catidParameter = catid.HasValue ?
                new ObjectParameter("catid", catid) :
                new ObjectParameter("catid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Expenses", idParameter, titleParameter, descriptionParameter, amountParameter, catidParameter);
        }
    }
}
